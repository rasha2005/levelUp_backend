// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  open
  booked
}

enum WalletType {
  credit
  debit
}



model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  img       String?
  name      String
  email     String  @unique
  mobile    String?
  password  String?
  isGoogleAuth Boolean @default(false)
  isBlocked Boolean @default(false)
  slots     Slot[]  @relation("UserSlots")
  chats     Chat[]  @relation("UserChats")
  reviews Review[]
  enrollments      Enrollment[]
  notifications Notification[]  
  tickets     Ticket[]
  

}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  otp       String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Instructor {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  img              String?
  name             String
  email            String            @unique
  mobile           String
  password         String
  isApproved       Boolean           @default(false)
  rating           Int?              @default(0)
  description      String?
  category         String?
  experience       String?
  resume           String?
  specializations  String[]
  scheduledSession ScheduledSession?
  wallet           Wallet?
  chats            Chat[]            @relation("InstructorChats")
  courseBundles CourseBundle[]
  announcements    Announcement[]
  tickets     Ticket[]

}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
  walletBalance      Float         @default(0.0)
}

model Category {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  catName String @unique
}

model ScheduledSession {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  instructorId String     @unique // Ensures only one document per instructor
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  events       Event[]
}

model Event {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  start              DateTime
  end                DateTime
  price              String
  status             EventStatus      @default(open)
  scheduledSessionId String           @db.ObjectId // Foreign key to ScheduledSession
  scheduledSession   ScheduledSession @relation(fields: [scheduledSessionId], references: [id])
  isRecurring          Boolean          @default(false) 
  recurrenceRule       String?         
  recurringExceptions  DateTime[]
}

model Slot {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  startTime         DateTime
  endTime           DateTime
  isRated           Boolean  @default(false)
  roomId            String
  instructorId      String   @db.ObjectId
  createdAt         DateTime @default(now())
  userId            String?  @db.ObjectId 
  courseBundleId    String?  @db.ObjectId 
  isCourse          Boolean  @default(false)
  hasInstructorJoined Boolean @default(false)
  isAttended          Boolean @default(false)
  hasTest             Boolean @default(false)
  test                Test?
  user       User?          @relation("UserSlots", fields: [userId], references: [id])
  courseBundle    CourseBundle?  @relation("CourseBundleSlots", fields: [courseBundleId], references: [id])
  }


model Wallet {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  balance      Float         @default(0.0)
  instructor   Instructor    @relation(fields: [instructorId], references: [id])
  instructorId String        @unique @db.ObjectId
  transactions Transaction[] // Relation to the Transaction model
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  type      WalletType   @default(credit)
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  walletId  String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Chat {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  userId           String       @db.ObjectId
  instructorId     String       @db.ObjectId
  latestMessageId  String?      @unique @db.ObjectId
  latestMessageAt  DateTime?
  user             User         @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  instructor       Instructor   @relation("InstructorChats", fields: [instructorId], references: [id], onDelete: Cascade)
  messages         Message[]    @relation("ChatMessages")
  latestMessage    Message?     @relation("LatestMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt        DateTime     @default(now())
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String   @db.ObjectId
  senderId    String   @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
  latestFor   Chat?    @relation("LatestMessage")
  chat        Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  value     String
  instructorId   String  @db.ObjectId
  userId  String  @db.ObjectId
  createdAt DateTime @default(now())
  user         User    @relation(fields: [userId], references: [id])
}

model QuestionBundle {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  instructorId   String
  bundleName     String
  questionsCount Int        @default(0)
  createdAt      DateTime   @default(now())
  questions    Question[]
}

model Question {
  id          String        @id @map("_id") @default(auto()) @db.ObjectId
  bundleId    String
  bundle      QuestionBundle @relation(fields: [bundleId], references: [id])
  text        String
  type        String
  options     String[] @default([])  
  answer      String
  createdAt   DateTime       @default(now())
}

model Test {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slotId    String   @unique @db.ObjectId
  questions String[]
  score     Int?     @default(0)
  attended  Boolean  @default(false)
  createdAt DateTime @default(now())

  slot    Slot @relation(fields: [slotId], references: [id])
}

model CourseBundle {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  thumbnail        String?   
  description      String
  price            Float
  participantLimit Int
  startDate        DateTime
  endDate          DateTime
  isFreeTrial      Boolean   @default(false)
  status           String @default("draft")
  sessionCount     Int       @default(0)
  enrollmentCount  Int       @default(0)
  createdAt        DateTime  @default(now())
  instructorId     String   @db.ObjectId
  instructor   Instructor   @relation(fields: [instructorId], references: [id])
  slots            Slot[]   @relation("CourseBundleSlots")
  enrollments      Enrollment[]
  announcements    Announcement[]
  tickets     Ticket[]

}

model Enrollment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  courseId    String      @db.ObjectId
  status      String      @default("active") 
  enrolledAt  DateTime    @default(now())
  completedAt DateTime?
  user        User        @relation(fields: [userId], references: [id])
  course      CourseBundle @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Announcement {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String?  @db.ObjectId 
  instructorId  String?  @db.ObjectId 
  title         String
  message       String
  createdAt     DateTime @default(now())
  course        CourseBundle? @relation(fields: [courseId], references: [id])
  instructor    Instructor?   @relation(fields: [instructorId], references: [id])

}

model Ticket {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId
  instructorId   String?     @db.ObjectId
  courseId       String?     @db.ObjectId
  description    String
  attachments    String?   
  status         String @default("pending")
  adminRemarks   String?    
  createdAt      DateTime    @default(now())
  user           User        @relation(fields: [userId], references: [id])
  instructor     Instructor? @relation(fields: [instructorId], references: [id])
  course         CourseBundle?     @relation(fields: [courseId], references: [id])
}

model QnA {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String
  userId    String
  userImg   String?
  userName  String?
  message   String
  parentId  String?  
  createdAt DateTime @default(now())
}
